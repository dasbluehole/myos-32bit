#ifndef __MUTEX_H__
#define __MUTEX_H__

typedef volatile unsigned int lock_t;
extern void init_lock(lock_t *l);
extern int test_and_set(unsigned int val,lock_t *l);
typedef struct 
{
	lock_t lock;
}mutex_t;
void init_mutex(mutex_t *mutex); //defined in lock.s
void destroy_mutex(mutex_t *mutex);
void mutex_try_lock(mutex_t *mutex); // spin until lock
void mutex_unlock(mutex_t *mutex);   // unlock

#endif
void init_mutex(mutex_t *mutex)
{
	init_lock(&mutex->lock); // sets lock = 0
}
void destroy_mutex(mutex_t *mutex)
{
	test_and_set(0,&mutex->lock);
}
void mutex_try_lock(mutex_t *mutex)
{
	// test_and_set returns old value of lock until it sets 
	while(test_and_set(1,&mutex->lock)==1); //loop here indefinitely
}

void mutex_unlock(mutex_t *mutex) // unlock , lock=0
{
	test_and_set(0,&mutex->lock);
}
